
# This is how we'll connect to PostgreSQL. It's good practice to keep the
# username lined up with your application's name but it's not necessary.
#
# Since we're dealing with development mode, it's ok to have a weak password
# such as `yourpassword` but in production you'll definitely want a better one.
#
# Eventually we'll be running everything in Docker containers, and you can set
# the host to be equal to `postgres` thanks to how Docker allows you to link
# containers.
#
# Everything else is standard Rails configuration for a PostgreSQL database.
DATABASE_URL=postgresql://dockerzon:yourpassword@postgres:5432/dockerzon?encoding=utf8&pool=5&timeout=5000

# Both of these values are using the same Redis address but in a high traffic
# environment you may want to separate them if it's a bottleneck.
#
# We'll be using the same Docker link trick for Redis which is how we can
# reference the Redis hostname as `redis`.
CACHE_URL=redis://redis:6379/0
JOB_WORKER_URL=redis://redis:6379/0

# You would typically use `rake secret` to generate a secure token. It is
# critical that you keep this value private in production.
SECRET_TOKEN=asecuretokenwouldnormallygohere

# This will be the address and port that Puma binds to. The only real
# reason you would ever change this is if you have another service running
# that must be on port 8000.
#
# This is commented out because it defaults to the value listed below.
#LISTEN_ON=0.0.0.0:8000

# Puma supports spawning multiple workers. It will fork out a process at the
# OS level to support concurrent requests. This typically requires more RAM.
WEB_CONCURRENCY=1

# Puma supports threading. Requests are served through an internal thread pool.
# Even on MRI, it is beneficial to leverage multiple threads because I/O operations
# do not lock the GIL. This typically requires more CPU resources.
MIN_THREADS=1
MAX_THREADS=1

# Requests that exceed 5 seconds will be termined and dumped to a stack trace.
# Feel free to modify this value to fit the needs of your project, but if you
# have any request that takes more than 5 seconds you probably need to re-think
# what you are doing 99.99% of the time.
#REQUEST_TIMEOUT=5
